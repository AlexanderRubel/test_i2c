
test_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800100  0000085c  000008d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000085c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014c7  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093a  00000000  00000000  0000209b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab5  00000000  00000000  000029d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  0000348c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000531  00000000  00000000  00003664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a5  00000000  00000000  00003b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000433a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	17 03       	mulsu	r17, r23
  6a:	28 03       	fmul	r18, r16
  6c:	39 03       	fmul	r19, r17
  6e:	4a 03       	fmul	r20, r18
  70:	5b 03       	fmul	r21, r19
  72:	6c 03       	fmul	r22, r20
  74:	7d 03       	fmul	r23, r21
  76:	8e 03       	fmulsu	r16, r22
  78:	9f 03       	fmulsu	r17, r23
  7a:	b0 03       	fmuls	r19, r16

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec e5       	ldi	r30, 0x5C	; 92
  90:	f8 e0       	ldi	r31, 0x08	; 8
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 3b       	cpi	r26, 0xB2	; 178
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  a2:	0c 94 2c 04 	jmp	0x858	; 0x858 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <main>:

int main(void)
{
	//DDRC = 0xff;

	DDRB |= _BV(5);
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~_BV(5);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8f 7d       	andi	r24, 0xDF	; 223
  b4:	85 b9       	out	0x05, r24	; 5
	
	int i = 0;
	
	twi_init();
  b6:	0e 94 07 04 	call	0x80e	; 0x80e <twi_init>
	oled_init();
  ba:	0e 94 ed 00 	call	0x1da	; 0x1da <oled_init>
	
	oled_area(0x00u, 127u, 0x00u, 7u);
  be:	27 e0       	ldi	r18, 0x07	; 7
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	6f e7       	ldi	r22, 0x7F	; 127
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 c0 00 	call	0x180	; 0x180 <oled_area>

	for (i = 0; i < 1024; i++) {
  ca:	c0 e0       	ldi	r28, 0x00	; 0
  cc:	d0 e0       	ldi	r29, 0x00	; 0
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <main+0x2e>
		oled_data(0x55u);
  d0:	85 e5       	ldi	r24, 0x55	; 85
  d2:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
	twi_init();
	oled_init();
	
	oled_area(0x00u, 127u, 0x00u, 7u);

	for (i = 0; i < 1024; i++) {
  d6:	21 96       	adiw	r28, 0x01	; 1
  d8:	c1 15       	cp	r28, r1
  da:	24 e0       	ldi	r18, 0x04	; 4
  dc:	d2 07       	cpc	r29, r18
  de:	c4 f3       	brlt	.-16     	; 0xd0 <main+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	93 ed       	ldi	r25, 0xD3	; 211
  e4:	20 e3       	ldi	r18, 0x30	; 48
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	20 40       	sbci	r18, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x3c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x46>
  f0:	00 00       	nop
		oled_data(0x55u);
	}
	
	_delay_ms(1000);
	clear_screen();
  f2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <clear_screen>
	for (i = 0; i < 181; i++) {
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	0f c0       	rjmp	.+30     	; 0x11a <main+0x70>
		clear_digit_field();
  fc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <clear_digit_field>
		form_number_from_digits(i);
 100:	8c 2f       	mov	r24, r28
 102:	0e 94 b1 02 	call	0x562	; 0x562 <form_number_from_digits>
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	99 e6       	ldi	r25, 0x69	; 105
 10a:	28 e1       	ldi	r18, 0x18	; 24
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	20 40       	sbci	r18, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x62>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x6c>
 116:	00 00       	nop
		oled_data(0x55u);
	}
	
	_delay_ms(1000);
	clear_screen();
	for (i = 0; i < 181; i++) {
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	c5 3b       	cpi	r28, 0xB5	; 181
 11c:	d1 05       	cpc	r29, r1
 11e:	74 f3       	brlt	.-36     	; 0xfc <main+0x52>
	}
	
    /* Replace with your application code */
    while (1) 
    {
		PORTB |= _BV(5);
 120:	85 b1       	in	r24, 0x05	; 5
 122:	80 62       	ori	r24, 0x20	; 32
 124:	85 b9       	out	0x05, r24	; 5
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	93 ed       	ldi	r25, 0xD3	; 211
 12a:	20 e3       	ldi	r18, 0x30	; 48
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	20 40       	sbci	r18, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x82>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x8c>
 136:	00 00       	nop
		_delay_ms(1000);
		PORTB &= ~_BV(5);
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	8f 7d       	andi	r24, 0xDF	; 223
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	93 ed       	ldi	r25, 0xD3	; 211
 142:	20 e3       	ldi	r18, 0x30	; 48
 144:	81 50       	subi	r24, 0x01	; 1
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	20 40       	sbci	r18, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x9a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xa4>
 14e:	00 00       	nop
 150:	e7 cf       	rjmp	.-50     	; 0x120 <main+0x76>

00000152 <oled_start_wtxn>:
	oled_cmd(page_begin);
	oled_cmd(page_end);
}

void oled_start_wtxn(void) {
	twi_start();
 152:	0e 94 10 04 	call	0x820	; 0x820 <twi_start>
	twi_write(OLED_ADDRESS_W << 1);
 156:	88 e7       	ldi	r24, 0x78	; 120
 158:	0e 94 18 04 	call	0x830	; 0x830 <twi_write>
 15c:	08 95       	ret

0000015e <oled_stop_txn>:
}
void oled_stop_txn(void) {
	twi_stop();
 15e:	0e 94 22 04 	call	0x844	; 0x844 <twi_stop>
 162:	08 95       	ret

00000164 <oled_cmd>:
 */ 
#include "twi_module.h"
#include "oled_display.h"
#include <stdint.h>

void oled_cmd(uint8_t cmd) {
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
	oled_start_wtxn();
 168:	0e 94 a9 00 	call	0x152	; 0x152 <oled_start_wtxn>
	twi_write(0x00u);
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 18 04 	call	0x830	; 0x830 <twi_write>
	twi_write(cmd);
 172:	8c 2f       	mov	r24, r28
 174:	0e 94 18 04 	call	0x830	; 0x830 <twi_write>
	oled_stop_txn();
 178:	0e 94 af 00 	call	0x15e	; 0x15e <oled_stop_txn>
}
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <oled_area>:
	twi_write(0x40u);
	twi_write(data);
	oled_stop_txn();
}

void oled_area(uint8_t seg_begin, uint8_t seg_end, uint8_t page_begin, uint8_t page_end) {	
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	08 2f       	mov	r16, r24
 18a:	16 2f       	mov	r17, r22
 18c:	d4 2f       	mov	r29, r20
 18e:	c2 2f       	mov	r28, r18
	oled_cmd(0x21u);
 190:	81 e2       	ldi	r24, 0x21	; 33
 192:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(seg_begin);
 196:	80 2f       	mov	r24, r16
 198:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(seg_end);
 19c:	81 2f       	mov	r24, r17
 19e:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x22u);
 1a2:	82 e2       	ldi	r24, 0x22	; 34
 1a4:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(page_begin);
 1a8:	8d 2f       	mov	r24, r29
 1aa:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(page_end);
 1ae:	8c 2f       	mov	r24, r28
 1b0:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	08 95       	ret

000001be <oled_data>:
	oled_start_wtxn();
	twi_write(0x00u);
	twi_write(cmd);
	oled_stop_txn();
}
void oled_data(uint8_t data) {
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24
	oled_start_wtxn();
 1c2:	0e 94 a9 00 	call	0x152	; 0x152 <oled_start_wtxn>
	twi_write(0x40u);
 1c6:	80 e4       	ldi	r24, 0x40	; 64
 1c8:	0e 94 18 04 	call	0x830	; 0x830 <twi_write>
	twi_write(data);
 1cc:	8c 2f       	mov	r24, r28
 1ce:	0e 94 18 04 	call	0x830	; 0x830 <twi_write>
	oled_stop_txn();
 1d2:	0e 94 af 00 	call	0x15e	; 0x15e <oled_stop_txn>
}
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <oled_init>:
void oled_stop_txn(void) {
	twi_stop();
}

void oled_init(void) {
	oled_cmd(0xAE);
 1da:	8e ea       	ldi	r24, 0xAE	; 174
 1dc:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xD5);
 1e0:	85 ed       	ldi	r24, 0xD5	; 213
 1e2:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x80);
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xA8);
 1ec:	88 ea       	ldi	r24, 0xA8	; 168
 1ee:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x3F);
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xD3);
 1f8:	83 ed       	ldi	r24, 0xD3	; 211
 1fa:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x00);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x40);
 204:	80 e4       	ldi	r24, 0x40	; 64
 206:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x8d);
 20a:	8d e8       	ldi	r24, 0x8D	; 141
 20c:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x14);
 210:	84 e1       	ldi	r24, 0x14	; 20
 212:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x20);
 216:	80 e2       	ldi	r24, 0x20	; 32
 218:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x00);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xA1);
 222:	81 ea       	ldi	r24, 0xA1	; 161
 224:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xC8);
 228:	88 ec       	ldi	r24, 0xC8	; 200
 22a:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xDA);
 22e:	8a ed       	ldi	r24, 0xDA	; 218
 230:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x12);
 234:	82 e1       	ldi	r24, 0x12	; 18
 236:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x81);
 23a:	81 e8       	ldi	r24, 0x81	; 129
 23c:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xCF);
 240:	8f ec       	ldi	r24, 0xCF	; 207
 242:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xD9);
 246:	89 ed       	ldi	r24, 0xD9	; 217
 248:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xF1);
 24c:	81 ef       	ldi	r24, 0xF1	; 241
 24e:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xDB);
 252:	8b ed       	ldi	r24, 0xDB	; 219
 254:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0x40);
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xA4);
 25e:	84 ea       	ldi	r24, 0xA4	; 164
 260:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xA6);
 264:	86 ea       	ldi	r24, 0xA6	; 166
 266:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
	oled_cmd(0xAF);
 26a:	8f ea       	ldi	r24, 0xAF	; 175
 26c:	0e 94 b2 00 	call	0x164	; 0x164 <oled_cmd>
 270:	08 95       	ret

00000272 <print_digit>:
		//for (j = 0; j < OLED_SEGMENTS_AMOUNT; j++) {
			//oled_data(oled_buffer[i][j]);
		//}
	//}
//}
void print_digit(uint8_t seg_begin, uint8_t page_begin, uint8_t digit[]) {
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	08 2f       	mov	r16, r24
 284:	d6 2e       	mov	r13, r22
 286:	ea 01       	movw	r28, r20
	int i = 0;
	
	oled_area(seg_begin, seg_begin + 7u, page_begin, page_begin + 5u);
 288:	15 e0       	ldi	r17, 0x05	; 5
 28a:	16 0f       	add	r17, r22
 28c:	67 e0       	ldi	r22, 0x07	; 7
 28e:	68 0f       	add	r22, r24
 290:	21 2f       	mov	r18, r17
 292:	4d 2d       	mov	r20, r13
 294:	0e 94 c0 00 	call	0x180	; 0x180 <oled_area>
	for (i = 0; i < 8; i++)
 298:	e1 2c       	mov	r14, r1
 29a:	f1 2c       	mov	r15, r1
 29c:	12 c0       	rjmp	.+36     	; 0x2c2 <print_digit+0x50>
		oled_data(particles_1pg[digit[0]][i]);
 29e:	e8 81       	ld	r30, Y
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	ee 5c       	subi	r30, 0xCE	; 206
 2b0:	fd 4f       	sbci	r31, 0xFD	; 253
 2b2:	ee 0d       	add	r30, r14
 2b4:	ff 1d       	adc	r31, r15
 2b6:	80 81       	ld	r24, Z
 2b8:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
//}
void print_digit(uint8_t seg_begin, uint8_t page_begin, uint8_t digit[]) {
	int i = 0;
	
	oled_area(seg_begin, seg_begin + 7u, page_begin, page_begin + 5u);
	for (i = 0; i < 8; i++)
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	e8 1a       	sub	r14, r24
 2c0:	f8 0a       	sbc	r15, r24
 2c2:	88 e0       	ldi	r24, 0x08	; 8
 2c4:	e8 16       	cp	r14, r24
 2c6:	f1 04       	cpc	r15, r1
 2c8:	54 f3       	brlt	.-44     	; 0x29e <print_digit+0x2c>
 2ca:	e1 2c       	mov	r14, r1
 2cc:	f1 2c       	mov	r15, r1
 2ce:	12 c0       	rjmp	.+36     	; 0x2f4 <print_digit+0x82>
		oled_data(particles_1pg[digit[0]][i]);
	for (i = 0; i < 8; i++)	
		oled_data(particles_1pg[digit[1]][i]);
 2d0:	e9 81       	ldd	r30, Y+1	; 0x01
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	ee 5c       	subi	r30, 0xCE	; 206
 2e2:	fd 4f       	sbci	r31, 0xFD	; 253
 2e4:	ee 0d       	add	r30, r14
 2e6:	ff 1d       	adc	r31, r15
 2e8:	80 81       	ld	r24, Z
 2ea:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
	int i = 0;
	
	oled_area(seg_begin, seg_begin + 7u, page_begin, page_begin + 5u);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[0]][i]);
	for (i = 0; i < 8; i++)	
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	e8 1a       	sub	r14, r24
 2f2:	f8 0a       	sbc	r15, r24
 2f4:	88 e0       	ldi	r24, 0x08	; 8
 2f6:	e8 16       	cp	r14, r24
 2f8:	f1 04       	cpc	r15, r1
 2fa:	54 f3       	brlt	.-44     	; 0x2d0 <print_digit+0x5e>
 2fc:	e1 2c       	mov	r14, r1
 2fe:	f1 2c       	mov	r15, r1
 300:	0f c0       	rjmp	.+30     	; 0x320 <print_digit+0xae>
		oled_data(particles_1pg[digit[1]][i]);
	for (i = 0; i < 16; i++)
		oled_data(particles_2pg[digit[2]][i]);
 302:	ea 81       	ldd	r30, Y+2	; 0x02
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	e8 9f       	mul	r30, r24
 308:	f0 01       	movw	r30, r0
 30a:	11 24       	eor	r1, r1
 30c:	ee 57       	subi	r30, 0x7E	; 126
 30e:	fe 4f       	sbci	r31, 0xFE	; 254
 310:	ee 0d       	add	r30, r14
 312:	ff 1d       	adc	r31, r15
 314:	80 81       	ld	r24, Z
 316:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
	oled_area(seg_begin, seg_begin + 7u, page_begin, page_begin + 5u);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[0]][i]);
	for (i = 0; i < 8; i++)	
		oled_data(particles_1pg[digit[1]][i]);
	for (i = 0; i < 16; i++)
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	e8 1a       	sub	r14, r24
 31e:	f8 0a       	sbc	r15, r24
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	e8 16       	cp	r14, r24
 324:	f1 04       	cpc	r15, r1
 326:	6c f3       	brlt	.-38     	; 0x302 <print_digit+0x90>
 328:	e1 2c       	mov	r14, r1
 32a:	f1 2c       	mov	r15, r1
 32c:	12 c0       	rjmp	.+36     	; 0x352 <print_digit+0xe0>
		oled_data(particles_2pg[digit[2]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[3]][i]);
 32e:	eb 81       	ldd	r30, Y+3	; 0x03
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	ee 0f       	add	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	ee 5c       	subi	r30, 0xCE	; 206
 340:	fd 4f       	sbci	r31, 0xFD	; 253
 342:	ee 0d       	add	r30, r14
 344:	ff 1d       	adc	r31, r15
 346:	80 81       	ld	r24, Z
 348:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
		oled_data(particles_1pg[digit[0]][i]);
	for (i = 0; i < 8; i++)	
		oled_data(particles_1pg[digit[1]][i]);
	for (i = 0; i < 16; i++)
		oled_data(particles_2pg[digit[2]][i]);
	for (i = 0; i < 8; i++)
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	e8 1a       	sub	r14, r24
 350:	f8 0a       	sbc	r15, r24
 352:	88 e0       	ldi	r24, 0x08	; 8
 354:	e8 16       	cp	r14, r24
 356:	f1 04       	cpc	r15, r1
 358:	54 f3       	brlt	.-44     	; 0x32e <print_digit+0xbc>
 35a:	e1 2c       	mov	r14, r1
 35c:	f1 2c       	mov	r15, r1
 35e:	12 c0       	rjmp	.+36     	; 0x384 <print_digit+0x112>
		oled_data(particles_1pg[digit[3]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[4]][i]);
 360:	ec 81       	ldd	r30, Y+4	; 0x04
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	ee 5c       	subi	r30, 0xCE	; 206
 372:	fd 4f       	sbci	r31, 0xFD	; 253
 374:	ee 0d       	add	r30, r14
 376:	ff 1d       	adc	r31, r15
 378:	80 81       	ld	r24, Z
 37a:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
		oled_data(particles_1pg[digit[1]][i]);
	for (i = 0; i < 16; i++)
		oled_data(particles_2pg[digit[2]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[3]][i]);
	for (i = 0; i < 8; i++)
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	e8 1a       	sub	r14, r24
 382:	f8 0a       	sbc	r15, r24
 384:	88 e0       	ldi	r24, 0x08	; 8
 386:	e8 16       	cp	r14, r24
 388:	f1 04       	cpc	r15, r1
 38a:	54 f3       	brlt	.-44     	; 0x360 <print_digit+0xee>
		oled_data(particles_1pg[digit[4]][i]);
	
	oled_area(seg_begin + 16u, seg_begin + 23u, page_begin, page_begin + 5u);
 38c:	21 2f       	mov	r18, r17
 38e:	4d 2d       	mov	r20, r13
 390:	67 e1       	ldi	r22, 0x17	; 23
 392:	60 0f       	add	r22, r16
 394:	80 e1       	ldi	r24, 0x10	; 16
 396:	80 0f       	add	r24, r16
 398:	0e 94 c0 00 	call	0x180	; 0x180 <oled_area>
	for (i = 0; i < 8; i++)
 39c:	e1 2c       	mov	r14, r1
 39e:	f1 2c       	mov	r15, r1
 3a0:	12 c0       	rjmp	.+36     	; 0x3c6 <print_digit+0x154>
		oled_data(particles_1pg[digit[5]][i]);
 3a2:	ed 81       	ldd	r30, Y+5	; 0x05
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	ee 5c       	subi	r30, 0xCE	; 206
 3b4:	fd 4f       	sbci	r31, 0xFD	; 253
 3b6:	ee 0d       	add	r30, r14
 3b8:	ff 1d       	adc	r31, r15
 3ba:	80 81       	ld	r24, Z
 3bc:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
		oled_data(particles_1pg[digit[3]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[4]][i]);
	
	oled_area(seg_begin + 16u, seg_begin + 23u, page_begin, page_begin + 5u);
	for (i = 0; i < 8; i++)
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	e8 1a       	sub	r14, r24
 3c4:	f8 0a       	sbc	r15, r24
 3c6:	88 e0       	ldi	r24, 0x08	; 8
 3c8:	e8 16       	cp	r14, r24
 3ca:	f1 04       	cpc	r15, r1
 3cc:	54 f3       	brlt	.-44     	; 0x3a2 <print_digit+0x130>
 3ce:	e1 2c       	mov	r14, r1
 3d0:	f1 2c       	mov	r15, r1
 3d2:	12 c0       	rjmp	.+36     	; 0x3f8 <print_digit+0x186>
		oled_data(particles_1pg[digit[5]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[6]][i]);
 3d4:	ee 81       	ldd	r30, Y+6	; 0x06
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	ee 0f       	add	r30, r30
 3de:	ff 1f       	adc	r31, r31
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	ee 5c       	subi	r30, 0xCE	; 206
 3e6:	fd 4f       	sbci	r31, 0xFD	; 253
 3e8:	ee 0d       	add	r30, r14
 3ea:	ff 1d       	adc	r31, r15
 3ec:	80 81       	ld	r24, Z
 3ee:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
		oled_data(particles_1pg[digit[4]][i]);
	
	oled_area(seg_begin + 16u, seg_begin + 23u, page_begin, page_begin + 5u);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[5]][i]);
	for (i = 0; i < 8; i++)
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	e8 1a       	sub	r14, r24
 3f6:	f8 0a       	sbc	r15, r24
 3f8:	88 e0       	ldi	r24, 0x08	; 8
 3fa:	e8 16       	cp	r14, r24
 3fc:	f1 04       	cpc	r15, r1
 3fe:	54 f3       	brlt	.-44     	; 0x3d4 <print_digit+0x162>
 400:	e1 2c       	mov	r14, r1
 402:	f1 2c       	mov	r15, r1
 404:	0f c0       	rjmp	.+30     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		oled_data(particles_1pg[digit[6]][i]);
	for (i = 0; i < 16; i++)
		oled_data(particles_2pg[digit[7]][i]);
 406:	ef 81       	ldd	r30, Y+7	; 0x07
 408:	80 e1       	ldi	r24, 0x10	; 16
 40a:	e8 9f       	mul	r30, r24
 40c:	f0 01       	movw	r30, r0
 40e:	11 24       	eor	r1, r1
 410:	ee 57       	subi	r30, 0x7E	; 126
 412:	fe 4f       	sbci	r31, 0xFE	; 254
 414:	ee 0d       	add	r30, r14
 416:	ff 1d       	adc	r31, r15
 418:	80 81       	ld	r24, Z
 41a:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
	oled_area(seg_begin + 16u, seg_begin + 23u, page_begin, page_begin + 5u);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[5]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[6]][i]);
	for (i = 0; i < 16; i++)
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	e8 1a       	sub	r14, r24
 422:	f8 0a       	sbc	r15, r24
 424:	80 e1       	ldi	r24, 0x10	; 16
 426:	e8 16       	cp	r14, r24
 428:	f1 04       	cpc	r15, r1
 42a:	6c f3       	brlt	.-38     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 42c:	e1 2c       	mov	r14, r1
 42e:	f1 2c       	mov	r15, r1
 430:	12 c0       	rjmp	.+36     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		oled_data(particles_2pg[digit[7]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[8]][i]);
 432:	e8 85       	ldd	r30, Y+8	; 0x08
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	ee 5c       	subi	r30, 0xCE	; 206
 444:	fd 4f       	sbci	r31, 0xFD	; 253
 446:	ee 0d       	add	r30, r14
 448:	ff 1d       	adc	r31, r15
 44a:	80 81       	ld	r24, Z
 44c:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
		oled_data(particles_1pg[digit[5]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[6]][i]);
	for (i = 0; i < 16; i++)
		oled_data(particles_2pg[digit[7]][i]);
	for (i = 0; i < 8; i++)
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	e8 1a       	sub	r14, r24
 454:	f8 0a       	sbc	r15, r24
 456:	88 e0       	ldi	r24, 0x08	; 8
 458:	e8 16       	cp	r14, r24
 45a:	f1 04       	cpc	r15, r1
 45c:	54 f3       	brlt	.-44     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 45e:	e1 2c       	mov	r14, r1
 460:	f1 2c       	mov	r15, r1
 462:	12 c0       	rjmp	.+36     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
		oled_data(particles_1pg[digit[8]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[9]][i]);
 464:	e9 85       	ldd	r30, Y+9	; 0x09
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	ee 0f       	add	r30, r30
 46a:	ff 1f       	adc	r31, r31
 46c:	ee 0f       	add	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	ee 0f       	add	r30, r30
 472:	ff 1f       	adc	r31, r31
 474:	ee 5c       	subi	r30, 0xCE	; 206
 476:	fd 4f       	sbci	r31, 0xFD	; 253
 478:	ee 0d       	add	r30, r14
 47a:	ff 1d       	adc	r31, r15
 47c:	80 81       	ld	r24, Z
 47e:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
		oled_data(particles_1pg[digit[6]][i]);
	for (i = 0; i < 16; i++)
		oled_data(particles_2pg[digit[7]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[8]][i]);
	for (i = 0; i < 8; i++)
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	e8 1a       	sub	r14, r24
 486:	f8 0a       	sbc	r15, r24
 488:	88 e0       	ldi	r24, 0x08	; 8
 48a:	e8 16       	cp	r14, r24
 48c:	f1 04       	cpc	r15, r1
 48e:	54 f3       	brlt	.-44     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
		oled_data(particles_1pg[digit[9]][i]);
	
	oled_area(seg_begin + 8, seg_begin + 15, page_begin, page_begin);
 490:	0f 2e       	mov	r0, r31
 492:	ff e0       	ldi	r31, 0x0F	; 15
 494:	cf 2e       	mov	r12, r31
 496:	f0 2d       	mov	r31, r0
 498:	c0 0e       	add	r12, r16
 49a:	08 5f       	subi	r16, 0xF8	; 248
 49c:	2d 2d       	mov	r18, r13
 49e:	4d 2d       	mov	r20, r13
 4a0:	6c 2d       	mov	r22, r12
 4a2:	80 2f       	mov	r24, r16
 4a4:	0e 94 c0 00 	call	0x180	; 0x180 <oled_area>
	for (i = 0; i < 8; i++)
 4a8:	e1 2c       	mov	r14, r1
 4aa:	f1 2c       	mov	r15, r1
 4ac:	12 c0       	rjmp	.+36     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
		oled_data(particles_1pg[digit[10]][i]);
 4ae:	ea 85       	ldd	r30, Y+10	; 0x0a
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	ee 0f       	add	r30, r30
 4b4:	ff 1f       	adc	r31, r31
 4b6:	ee 0f       	add	r30, r30
 4b8:	ff 1f       	adc	r31, r31
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	ee 5c       	subi	r30, 0xCE	; 206
 4c0:	fd 4f       	sbci	r31, 0xFD	; 253
 4c2:	ee 0d       	add	r30, r14
 4c4:	ff 1d       	adc	r31, r15
 4c6:	80 81       	ld	r24, Z
 4c8:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
		oled_data(particles_1pg[digit[8]][i]);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[9]][i]);
	
	oled_area(seg_begin + 8, seg_begin + 15, page_begin, page_begin);
	for (i = 0; i < 8; i++)
 4cc:	8f ef       	ldi	r24, 0xFF	; 255
 4ce:	e8 1a       	sub	r14, r24
 4d0:	f8 0a       	sbc	r15, r24
 4d2:	88 e0       	ldi	r24, 0x08	; 8
 4d4:	e8 16       	cp	r14, r24
 4d6:	f1 04       	cpc	r15, r1
 4d8:	54 f3       	brlt	.-44     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		oled_data(particles_1pg[digit[10]][i]);
	oled_area(seg_begin + 8, seg_begin + 15, page_begin + 2, page_begin + 3);
 4da:	23 e0       	ldi	r18, 0x03	; 3
 4dc:	2d 0d       	add	r18, r13
 4de:	42 e0       	ldi	r20, 0x02	; 2
 4e0:	4d 0d       	add	r20, r13
 4e2:	6c 2d       	mov	r22, r12
 4e4:	80 2f       	mov	r24, r16
 4e6:	0e 94 c0 00 	call	0x180	; 0x180 <oled_area>
	for (i = 0; i < 16; i++)
 4ea:	e1 2c       	mov	r14, r1
 4ec:	f1 2c       	mov	r15, r1
 4ee:	0f c0       	rjmp	.+30     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		oled_data(particles_2pg[digit[11]][i]);
 4f0:	eb 85       	ldd	r30, Y+11	; 0x0b
 4f2:	80 e1       	ldi	r24, 0x10	; 16
 4f4:	e8 9f       	mul	r30, r24
 4f6:	f0 01       	movw	r30, r0
 4f8:	11 24       	eor	r1, r1
 4fa:	ee 57       	subi	r30, 0x7E	; 126
 4fc:	fe 4f       	sbci	r31, 0xFE	; 254
 4fe:	ee 0d       	add	r30, r14
 500:	ff 1d       	adc	r31, r15
 502:	80 81       	ld	r24, Z
 504:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
	
	oled_area(seg_begin + 8, seg_begin + 15, page_begin, page_begin);
	for (i = 0; i < 8; i++)
		oled_data(particles_1pg[digit[10]][i]);
	oled_area(seg_begin + 8, seg_begin + 15, page_begin + 2, page_begin + 3);
	for (i = 0; i < 16; i++)
 508:	8f ef       	ldi	r24, 0xFF	; 255
 50a:	e8 1a       	sub	r14, r24
 50c:	f8 0a       	sbc	r15, r24
 50e:	80 e1       	ldi	r24, 0x10	; 16
 510:	e8 16       	cp	r14, r24
 512:	f1 04       	cpc	r15, r1
 514:	6c f3       	brlt	.-38     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
		oled_data(particles_2pg[digit[11]][i]);
	oled_area(seg_begin + 8, seg_begin + 15, page_begin + 5, page_begin + 5);
 516:	21 2f       	mov	r18, r17
 518:	41 2f       	mov	r20, r17
 51a:	6c 2d       	mov	r22, r12
 51c:	80 2f       	mov	r24, r16
 51e:	0e 94 c0 00 	call	0x180	; 0x180 <oled_area>
	for (i = 0; i < 8; i++)
 522:	00 e0       	ldi	r16, 0x00	; 0
 524:	10 e0       	ldi	r17, 0x00	; 0
 526:	11 c0       	rjmp	.+34     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
		oled_data(particles_1pg[digit[12]][i]);
 528:	ec 85       	ldd	r30, Y+12	; 0x0c
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	ee 5c       	subi	r30, 0xCE	; 206
 53a:	fd 4f       	sbci	r31, 0xFD	; 253
 53c:	e0 0f       	add	r30, r16
 53e:	f1 1f       	adc	r31, r17
 540:	80 81       	ld	r24, Z
 542:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
		oled_data(particles_1pg[digit[10]][i]);
	oled_area(seg_begin + 8, seg_begin + 15, page_begin + 2, page_begin + 3);
	for (i = 0; i < 16; i++)
		oled_data(particles_2pg[digit[11]][i]);
	oled_area(seg_begin + 8, seg_begin + 15, page_begin + 5, page_begin + 5);
	for (i = 0; i < 8; i++)
 546:	0f 5f       	subi	r16, 0xFF	; 255
 548:	1f 4f       	sbci	r17, 0xFF	; 255
 54a:	08 30       	cpi	r16, 0x08	; 8
 54c:	11 05       	cpc	r17, r1
 54e:	64 f3       	brlt	.-40     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
		oled_data(particles_1pg[digit[12]][i]);
}
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	08 95       	ret

00000562 <form_number_from_digits>:
void form_number_from_digits(uint8_t num) {
 562:	ef 92       	push	r14
 564:	ff 92       	push	r15
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
 572:	29 97       	sbiw	r28, 0x09	; 9
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	f8 94       	cli
 578:	de bf       	out	0x3e, r29	; 62
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	cd bf       	out	0x3d, r28	; 61
	int offset[3];
	int num_size = 0; //how much digits
	uint8_t tmp_n = num;
	uint8_t digits[3];
	
	if (num > 180)
 57e:	85 3b       	cpi	r24, 0xB5	; 181
 580:	08 f0       	brcs	.+2      	; 0x584 <form_number_from_digits+0x22>
 582:	05 c1       	rjmp	.+522    	; 0x78e <form_number_from_digits+0x22c>
		return ;
	
	digits[2] = tmp_n / 100;
 584:	99 e2       	ldi	r25, 0x29	; 41
 586:	89 9f       	mul	r24, r25
 588:	91 2d       	mov	r25, r1
 58a:	11 24       	eor	r1, r1
 58c:	92 95       	swap	r25
 58e:	9f 70       	andi	r25, 0x0F	; 15
 590:	99 87       	std	Y+9, r25	; 0x09
	tmp_n %= 100;
 592:	38 2f       	mov	r19, r24
 594:	24 e6       	ldi	r18, 0x64	; 100
 596:	92 9f       	mul	r25, r18
 598:	30 19       	sub	r19, r0
 59a:	11 24       	eor	r1, r1
	digits[1] = tmp_n / 10;
 59c:	8d ec       	ldi	r24, 0xCD	; 205
 59e:	38 9f       	mul	r19, r24
 5a0:	81 2d       	mov	r24, r1
 5a2:	11 24       	eor	r1, r1
 5a4:	86 95       	lsr	r24
 5a6:	86 95       	lsr	r24
 5a8:	86 95       	lsr	r24
 5aa:	88 87       	std	Y+8, r24	; 0x08
	tmp_n %= 10;
 5ac:	48 2f       	mov	r20, r24
 5ae:	44 0f       	add	r20, r20
 5b0:	24 2f       	mov	r18, r20
 5b2:	22 0f       	add	r18, r18
 5b4:	22 0f       	add	r18, r18
 5b6:	24 0f       	add	r18, r20
 5b8:	32 1b       	sub	r19, r18
	digits[0] = tmp_n;
 5ba:	3f 83       	std	Y+7, r19	; 0x07
	
	if (digits[2] == 0) {
 5bc:	91 11       	cpse	r25, r1
 5be:	14 c0       	rjmp	.+40     	; 0x5e8 <form_number_from_digits+0x86>
		if (digits[1] == 0) {
 5c0:	81 11       	cpse	r24, r1
 5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <form_number_from_digits+0x70>
			num_size = 1;
			offset[0] = -12;
 5c4:	84 ef       	ldi	r24, 0xF4	; 244
 5c6:	9f ef       	ldi	r25, 0xFF	; 255
 5c8:	9a 83       	std	Y+2, r25	; 0x02
 5ca:	89 83       	std	Y+1, r24	; 0x01
	tmp_n %= 10;
	digits[0] = tmp_n;
	
	if (digits[2] == 0) {
		if (digits[1] == 0) {
			num_size = 1;
 5cc:	01 e0       	ldi	r16, 0x01	; 1
 5ce:	10 e0       	ldi	r17, 0x00	; 0
 5d0:	19 c0       	rjmp	.+50     	; 0x604 <form_number_from_digits+0xa2>
			offset[0] = -12;
		}
		else {
			num_size = 2;
			offset[0] = 4;
 5d2:	84 e0       	ldi	r24, 0x04	; 4
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	9a 83       	std	Y+2, r25	; 0x02
 5d8:	89 83       	std	Y+1, r24	; 0x01
			offset[1] = -28;
 5da:	84 ee       	ldi	r24, 0xE4	; 228
 5dc:	9f ef       	ldi	r25, 0xFF	; 255
 5de:	9c 83       	std	Y+4, r25	; 0x04
 5e0:	8b 83       	std	Y+3, r24	; 0x03
		if (digits[1] == 0) {
			num_size = 1;
			offset[0] = -12;
		}
		else {
			num_size = 2;
 5e2:	02 e0       	ldi	r16, 0x02	; 2
 5e4:	10 e0       	ldi	r17, 0x00	; 0
 5e6:	0e c0       	rjmp	.+28     	; 0x604 <form_number_from_digits+0xa2>
			offset[1] = -28;
		}
	}
	else {
		num_size = 3;
		offset[0] = 20; 
 5e8:	84 e1       	ldi	r24, 0x14	; 20
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	9a 83       	std	Y+2, r25	; 0x02
 5ee:	89 83       	std	Y+1, r24	; 0x01
		offset[1] = -12; 
 5f0:	84 ef       	ldi	r24, 0xF4	; 244
 5f2:	9f ef       	ldi	r25, 0xFF	; 255
 5f4:	9c 83       	std	Y+4, r25	; 0x04
 5f6:	8b 83       	std	Y+3, r24	; 0x03
		offset[2] = -44;
 5f8:	84 ed       	ldi	r24, 0xD4	; 212
 5fa:	9f ef       	ldi	r25, 0xFF	; 255
 5fc:	9e 83       	std	Y+6, r25	; 0x06
 5fe:	8d 83       	std	Y+5, r24	; 0x05
			offset[0] = 4;
			offset[1] = -28;
		}
	}
	else {
		num_size = 3;
 600:	03 e0       	ldi	r16, 0x03	; 3
 602:	10 e0       	ldi	r17, 0x00	; 0
		offset[0] = 20; 
		offset[1] = -12; 
		offset[2] = -44;
	}
	
	for (i = 0; i < num_size; i++) {
 604:	e1 2c       	mov	r14, r1
 606:	f1 2c       	mov	r15, r1
 608:	be c0       	rjmp	.+380    	; 0x786 <form_number_from_digits+0x224>
		switch(digits[i]) {
 60a:	e7 e0       	ldi	r30, 0x07	; 7
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	ec 0f       	add	r30, r28
 610:	fd 1f       	adc	r31, r29
 612:	ee 0d       	add	r30, r14
 614:	ff 1d       	adc	r31, r15
 616:	e0 81       	ld	r30, Z
 618:	8e 2f       	mov	r24, r30
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	8a 30       	cpi	r24, 0x0A	; 10
 61e:	91 05       	cpc	r25, r1
 620:	08 f0       	brcs	.+2      	; 0x624 <form_number_from_digits+0xc2>
 622:	ae c0       	rjmp	.+348    	; 0x780 <form_number_from_digits+0x21e>
 624:	fc 01       	movw	r30, r24
 626:	ec 5c       	subi	r30, 0xCC	; 204
 628:	ff 4f       	sbci	r31, 0xFF	; 255
 62a:	0c 94 26 04 	jmp	0x84c	; 0x84c <__tablejump2__>
			case 0:  print_digit(128/2 + offset[i], 1u, digit_0); break;
 62e:	f7 01       	movw	r30, r14
 630:	ee 0f       	add	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	8c 0f       	add	r24, r28
 63a:	9d 1f       	adc	r25, r29
 63c:	e8 0f       	add	r30, r24
 63e:	f9 1f       	adc	r31, r25
 640:	80 81       	ld	r24, Z
 642:	45 e7       	ldi	r20, 0x75	; 117
 644:	51 e0       	ldi	r21, 0x01	; 1
 646:	61 e0       	ldi	r22, 0x01	; 1
 648:	80 5c       	subi	r24, 0xC0	; 192
 64a:	0e 94 39 01 	call	0x272	; 0x272 <print_digit>
 64e:	98 c0       	rjmp	.+304    	; 0x780 <form_number_from_digits+0x21e>
			case 1:  print_digit(128/2 + offset[i], 1u, digit_1); break;
 650:	f7 01       	movw	r30, r14
 652:	ee 0f       	add	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	8c 0f       	add	r24, r28
 65c:	9d 1f       	adc	r25, r29
 65e:	e8 0f       	add	r30, r24
 660:	f9 1f       	adc	r31, r25
 662:	80 81       	ld	r24, Z
 664:	48 e6       	ldi	r20, 0x68	; 104
 666:	51 e0       	ldi	r21, 0x01	; 1
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	80 5c       	subi	r24, 0xC0	; 192
 66c:	0e 94 39 01 	call	0x272	; 0x272 <print_digit>
 670:	87 c0       	rjmp	.+270    	; 0x780 <form_number_from_digits+0x21e>
			case 2:  print_digit(128/2 + offset[i], 1u, digit_2); break;
 672:	f7 01       	movw	r30, r14
 674:	ee 0f       	add	r30, r30
 676:	ff 1f       	adc	r31, r31
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	8c 0f       	add	r24, r28
 67e:	9d 1f       	adc	r25, r29
 680:	e8 0f       	add	r30, r24
 682:	f9 1f       	adc	r31, r25
 684:	80 81       	ld	r24, Z
 686:	4b e5       	ldi	r20, 0x5B	; 91
 688:	51 e0       	ldi	r21, 0x01	; 1
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	80 5c       	subi	r24, 0xC0	; 192
 68e:	0e 94 39 01 	call	0x272	; 0x272 <print_digit>
 692:	76 c0       	rjmp	.+236    	; 0x780 <form_number_from_digits+0x21e>
			case 3:  print_digit(128/2 + offset[i], 1u, digit_3); break;
 694:	f7 01       	movw	r30, r14
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	8c 0f       	add	r24, r28
 6a0:	9d 1f       	adc	r25, r29
 6a2:	e8 0f       	add	r30, r24
 6a4:	f9 1f       	adc	r31, r25
 6a6:	80 81       	ld	r24, Z
 6a8:	4e e4       	ldi	r20, 0x4E	; 78
 6aa:	51 e0       	ldi	r21, 0x01	; 1
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	80 5c       	subi	r24, 0xC0	; 192
 6b0:	0e 94 39 01 	call	0x272	; 0x272 <print_digit>
 6b4:	65 c0       	rjmp	.+202    	; 0x780 <form_number_from_digits+0x21e>
			case 4:  print_digit(128/2 + offset[i], 1u, digit_4); break;
 6b6:	f7 01       	movw	r30, r14
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	8c 0f       	add	r24, r28
 6c2:	9d 1f       	adc	r25, r29
 6c4:	e8 0f       	add	r30, r24
 6c6:	f9 1f       	adc	r31, r25
 6c8:	80 81       	ld	r24, Z
 6ca:	41 e4       	ldi	r20, 0x41	; 65
 6cc:	51 e0       	ldi	r21, 0x01	; 1
 6ce:	61 e0       	ldi	r22, 0x01	; 1
 6d0:	80 5c       	subi	r24, 0xC0	; 192
 6d2:	0e 94 39 01 	call	0x272	; 0x272 <print_digit>
 6d6:	54 c0       	rjmp	.+168    	; 0x780 <form_number_from_digits+0x21e>
			case 5:  print_digit(128/2 + offset[i], 1u, digit_5); break;
 6d8:	f7 01       	movw	r30, r14
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	8c 0f       	add	r24, r28
 6e4:	9d 1f       	adc	r25, r29
 6e6:	e8 0f       	add	r30, r24
 6e8:	f9 1f       	adc	r31, r25
 6ea:	80 81       	ld	r24, Z
 6ec:	44 e3       	ldi	r20, 0x34	; 52
 6ee:	51 e0       	ldi	r21, 0x01	; 1
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	80 5c       	subi	r24, 0xC0	; 192
 6f4:	0e 94 39 01 	call	0x272	; 0x272 <print_digit>
 6f8:	43 c0       	rjmp	.+134    	; 0x780 <form_number_from_digits+0x21e>
			case 6:  print_digit(128/2 + offset[i], 1u, digit_6); break;
 6fa:	f7 01       	movw	r30, r14
 6fc:	ee 0f       	add	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	8c 0f       	add	r24, r28
 706:	9d 1f       	adc	r25, r29
 708:	e8 0f       	add	r30, r24
 70a:	f9 1f       	adc	r31, r25
 70c:	80 81       	ld	r24, Z
 70e:	47 e2       	ldi	r20, 0x27	; 39
 710:	51 e0       	ldi	r21, 0x01	; 1
 712:	61 e0       	ldi	r22, 0x01	; 1
 714:	80 5c       	subi	r24, 0xC0	; 192
 716:	0e 94 39 01 	call	0x272	; 0x272 <print_digit>
 71a:	32 c0       	rjmp	.+100    	; 0x780 <form_number_from_digits+0x21e>
			case 7:  print_digit(128/2 + offset[i], 1u, digit_7); break;
 71c:	f7 01       	movw	r30, r14
 71e:	ee 0f       	add	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	8c 0f       	add	r24, r28
 728:	9d 1f       	adc	r25, r29
 72a:	e8 0f       	add	r30, r24
 72c:	f9 1f       	adc	r31, r25
 72e:	80 81       	ld	r24, Z
 730:	4a e1       	ldi	r20, 0x1A	; 26
 732:	51 e0       	ldi	r21, 0x01	; 1
 734:	61 e0       	ldi	r22, 0x01	; 1
 736:	80 5c       	subi	r24, 0xC0	; 192
 738:	0e 94 39 01 	call	0x272	; 0x272 <print_digit>
 73c:	21 c0       	rjmp	.+66     	; 0x780 <form_number_from_digits+0x21e>
			case 8:  print_digit(128/2 + offset[i], 1u, digit_8); break;
 73e:	f7 01       	movw	r30, r14
 740:	ee 0f       	add	r30, r30
 742:	ff 1f       	adc	r31, r31
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	8c 0f       	add	r24, r28
 74a:	9d 1f       	adc	r25, r29
 74c:	e8 0f       	add	r30, r24
 74e:	f9 1f       	adc	r31, r25
 750:	80 81       	ld	r24, Z
 752:	4d e0       	ldi	r20, 0x0D	; 13
 754:	51 e0       	ldi	r21, 0x01	; 1
 756:	61 e0       	ldi	r22, 0x01	; 1
 758:	80 5c       	subi	r24, 0xC0	; 192
 75a:	0e 94 39 01 	call	0x272	; 0x272 <print_digit>
 75e:	10 c0       	rjmp	.+32     	; 0x780 <form_number_from_digits+0x21e>
			case 9:  print_digit(128/2 + offset[i], 1u, digit_9); break;
 760:	f7 01       	movw	r30, r14
 762:	ee 0f       	add	r30, r30
 764:	ff 1f       	adc	r31, r31
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	8c 0f       	add	r24, r28
 76c:	9d 1f       	adc	r25, r29
 76e:	e8 0f       	add	r30, r24
 770:	f9 1f       	adc	r31, r25
 772:	80 81       	ld	r24, Z
 774:	40 e0       	ldi	r20, 0x00	; 0
 776:	51 e0       	ldi	r21, 0x01	; 1
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	80 5c       	subi	r24, 0xC0	; 192
 77c:	0e 94 39 01 	call	0x272	; 0x272 <print_digit>
		offset[0] = 20; 
		offset[1] = -12; 
		offset[2] = -44;
	}
	
	for (i = 0; i < num_size; i++) {
 780:	9f ef       	ldi	r25, 0xFF	; 255
 782:	e9 1a       	sub	r14, r25
 784:	f9 0a       	sbc	r15, r25
 786:	e0 16       	cp	r14, r16
 788:	f1 06       	cpc	r15, r17
 78a:	0c f4       	brge	.+2      	; 0x78e <form_number_from_digits+0x22c>
 78c:	3e cf       	rjmp	.-388    	; 0x60a <form_number_from_digits+0xa8>
			case 7:  print_digit(128/2 + offset[i], 1u, digit_7); break;
			case 8:  print_digit(128/2 + offset[i], 1u, digit_8); break;
			case 9:  print_digit(128/2 + offset[i], 1u, digit_9); break;
		}
	}
}	
 78e:	29 96       	adiw	r28, 0x09	; 9
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	de bf       	out	0x3e, r29	; 62
 796:	0f be       	out	0x3f, r0	; 63
 798:	cd bf       	out	0x3d, r28	; 61
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	1f 91       	pop	r17
 7a0:	0f 91       	pop	r16
 7a2:	ff 90       	pop	r15
 7a4:	ef 90       	pop	r14
 7a6:	08 95       	ret

000007a8 <clear_digit_field>:
	//form_buffer_from_digits(num);
	//
	//print_buffer();
//}
//
void clear_digit_field(void) {
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
	int i;
	oled_area(20u, 107u, 1u, 6u);
 7ac:	26 e0       	ldi	r18, 0x06	; 6
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	6b e6       	ldi	r22, 0x6B	; 107
 7b2:	84 e1       	ldi	r24, 0x14	; 20
 7b4:	0e 94 c0 00 	call	0x180	; 0x180 <oled_area>
	
	oled_start_wtxn();
 7b8:	0e 94 a9 00 	call	0x152	; 0x152 <oled_start_wtxn>
	twi_write(0x40u);
 7bc:	80 e4       	ldi	r24, 0x40	; 64
 7be:	0e 94 18 04 	call	0x830	; 0x830 <twi_write>
	for (i = 0; i < 528; i++) {
 7c2:	c0 e0       	ldi	r28, 0x00	; 0
 7c4:	d0 e0       	ldi	r29, 0x00	; 0
 7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <clear_digit_field+0x28>
		twi_write(0x00u);
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	0e 94 18 04 	call	0x830	; 0x830 <twi_write>
	int i;
	oled_area(20u, 107u, 1u, 6u);
	
	oled_start_wtxn();
	twi_write(0x40u);
	for (i = 0; i < 528; i++) {
 7ce:	21 96       	adiw	r28, 0x01	; 1
 7d0:	c0 31       	cpi	r28, 0x10	; 16
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	d8 07       	cpc	r29, r24
 7d6:	c4 f3       	brlt	.-16     	; 0x7c8 <clear_digit_field+0x20>
		twi_write(0x00u);
	}
	oled_stop_txn();
 7d8:	0e 94 af 00 	call	0x15e	; 0x15e <oled_stop_txn>
}
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	08 95       	ret

000007e2 <clear_screen>:
void clear_screen(void) {
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
	int i;
	
	oled_area(0x00u, 127u, 0x00u, 7u);
 7e6:	27 e0       	ldi	r18, 0x07	; 7
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	6f e7       	ldi	r22, 0x7F	; 127
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	0e 94 c0 00 	call	0x180	; 0x180 <oled_area>

	for (i = 0; i < 1024; i++) {
 7f2:	c0 e0       	ldi	r28, 0x00	; 0
 7f4:	d0 e0       	ldi	r29, 0x00	; 0
 7f6:	04 c0       	rjmp	.+8      	; 0x800 <__DATA_REGION_LENGTH__>
		oled_data(0x00u);
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	0e 94 df 00 	call	0x1be	; 0x1be <oled_data>
void clear_screen(void) {
	int i;
	
	oled_area(0x00u, 127u, 0x00u, 7u);

	for (i = 0; i < 1024; i++) {
 7fe:	21 96       	adiw	r28, 0x01	; 1
 800:	c1 15       	cp	r28, r1
 802:	84 e0       	ldi	r24, 0x04	; 4
 804:	d8 07       	cpc	r29, r24
 806:	c4 f3       	brlt	.-16     	; 0x7f8 <clear_screen+0x16>
		oled_data(0x00u);
	}
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	08 95       	ret

0000080e <twi_init>:
	TWCR = (1 << TWINT) | (1 << TWEN);
	
	while ((TWCR & (1 << TWINT)) == 0);
	
	return TWDR;
}
 80e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 812:	89 e3       	ldi	r24, 0x39	; 57
 814:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 818:	84 e0       	ldi	r24, 0x04	; 4
 81a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 81e:	08 95       	ret

00000820 <twi_start>:
 820:	84 ea       	ldi	r24, 0xA4	; 164
 822:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 826:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 82a:	88 23       	and	r24, r24
 82c:	e4 f7       	brge	.-8      	; 0x826 <twi_start+0x6>
 82e:	08 95       	ret

00000830 <twi_write>:
 830:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 834:	84 e8       	ldi	r24, 0x84	; 132
 836:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 83a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 83e:	88 23       	and	r24, r24
 840:	e4 f7       	brge	.-8      	; 0x83a <twi_write+0xa>
 842:	08 95       	ret

00000844 <twi_stop>:

void twi_stop(void) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 844:	84 e9       	ldi	r24, 0x94	; 148
 846:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 84a:	08 95       	ret

0000084c <__tablejump2__>:
 84c:	ee 0f       	add	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	05 90       	lpm	r0, Z+
 852:	f4 91       	lpm	r31, Z
 854:	e0 2d       	mov	r30, r0
 856:	09 94       	ijmp

00000858 <_exit>:
 858:	f8 94       	cli

0000085a <__stop_program>:
 85a:	ff cf       	rjmp	.-2      	; 0x85a <__stop_program>
